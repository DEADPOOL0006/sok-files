                                                                           Programming Assignment: Problem Set 1
Problem 1: Max Subarray Problem

# In[1]:

    def maxSubArray(a):
    n = len(a)
    if n == 1:
        return 0
    max_diff = float('-inf')
    min_so_far = float('inf')
    
    for i in range(n):
        min_so_far = min(min_so_far, a[i])
        max_diff = max(max_diff, a[i] - min_so_far)
    
    return max_diff

Problem 2
Implement the polynomial_multiply function below.

# In[4]:

from numpy.fft import fft, ifft
from numpy import real

def polynomial_multiply(a_coeff_list, b_coeff_list):
    n = len(a_coeff_list)
    m = len(b_coeff_list)
    padded_size = n + m - 1
    a_padded = a_coeff_list + [0] * (padded_size - n)
    b_padded = b_coeff_list + [0] * (padded_size - m)
    
    fft_a = fft(a_padded)
    fft_b = fft(b_padded)
    
    fft_result = [fft_a[i] * fft_b[i] for i in range(padded_size)]
    
    result_coeff_list = [real(x) for x in ifft(fft_result)]
    
    return result_coeff_list

Problem 3

# In[7]:

def check_sum_exists(a, b, c, n):
    a_coeffs = [0] * n
    b_coeffs = [0] * n 
    
    for num in a:
        a_coeffs[num] = 1
    for num in b:
        b_coeffs[num] = 1

    ab_product_coeffs = polynomial_multiply(a_coeffs, b_coeffs)
    
    for num in c:
        if ab_product_coeffs[num] >= 0.5:
            return True
    
    return False

Problem 4

# In[9]:

import csv
from numpy.fft import fft, ifft
from numpy import real, imag

file = open('natural_gas_futures_weekly_all.csv', 'r')
csv_handle = csv.DictReader(file)

weekly_prices = []
dates = []

for rows in csv_handle:
    dates.append(rows['Date'])
    weekly_prices.append(0.5 * (float(rows['High']) + float(rows['Low'])))

file.close()

fft_data = fft(weekly_prices)
N = len(fft_data)
assert(N == len(weekly_prices))

fft_frequencies = [i / N for i in range(N)]
for i in range(N // 2 + 1, N):
    fft_frequencies[i] -= 1

def select_all_items_in_freq_range(lo, hi):
    new_fft_data = []
    for (fft_val, fft_freq) in zip(fft_data, fft_frequencies):
        if lo <= fft_freq and fft_freq < hi:
            new_fft_data.append(fft_val)
        elif -hi < fft_freq and fft_freq <= -lo:
            new_fft_data.append(fft_val)
        else:
            new_fft_data.append(0.0)
    filtered_data = ifft(new_fft_data)
    assert all(abs(imag(x)) <= 1E-10 for x in filtered_data)
    return [real(x) for x in filtered_data]

upto_1_year = select_all_items_in_freq_range(0, 1/52)
one_year_to_1_quarter = select_all_items_in_freq_range(1/52, 1/13)
less_than_1_quarter = select_all_items_in_freq_range(1/13, 1)
