
                                                                                       DAA SKILL - 9 ( @KLWKS_BOT THANOS ) 

1) Cloudy Day ( JAVA 7 )

import java.io.*;
import java.util.*;

public class CloudyDay {

    static int ni(InputStream is) throws IOException {
        int num = 0, b;
        boolean minus = false;
        while ((b = is.read()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;
        if (b == '-') {
            minus = true;
            b = is.read();
        }
        while (b >= '0' && b <= '9') {
            num = num * 10 + (b - '0');
            b = is.read();
        }
        return minus ? -num : num;
    }



public static void main(String[] args) throws IOException {
        InputStream is = System.in;
        PrintWriter out = new PrintWriter(System.out);

        int n = ni(is);
        int[][] pt = new int[n][2];

        for (int i = 0; i < n; i++) pt[i][0] = ni(is);
        for (int i = 0; i < n; i++) pt[i][1] = ni(is);

        Arrays.sort(pt, new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                return Integer.compare(a[1], b[1]);
            }
        });

        int m = ni(is);
        int[][] cs = new int[m][2];

        for (int i = 0; i < m; i++) cs[i][0] = ni(is);
        for (int i = 0; i < m; i++) cs[i][1] = ni(is);

        for (int i = 0; i < m; i++) {
            int l = cs[i][0] - cs[i][1];
            int r = cs[i][0] + cs[i][1];
            cs[i][0] = l;
            cs[i][1] = r;
        }

        int[] ts = new int[n];
        for (int i = 0; i < n; i++) ts[i] = pt[i][1];

        long[] imos = new long[n + 2];

        for (int i = 0; i < m; i++) {
            int l = Arrays.binarySearch(ts, cs[i][0]);
            if (l < 0) l = -l - 1;
            int r = Arrays.binarySearch(ts, cs[i][1]);
            if (r < 0) r = -r - 2;
            imos[l]++;
            imos[r + 1]--;
        }

        for (int i = 0; i < n; i++) imos[i + 1] += imos[i];

        long base = 0;
        for (int i = 0; i < n; i++) {
            if (imos[i] != 1) {
                if (imos[i] == 0) base += pt[i][0];
                imos[i] = 0;
            } else {
                imos[i] = pt[i][0];
            }
        }

        for (int i = 0; i < n; i++) imos[i + 1] += imos[i];

        long ans = 0;
        for (int i = 0; i < m; i++) {
            int l = Arrays.binarySearch(ts, cs[i][0]);
            if (l < 0) l = -l - 1;
            int r = Arrays.binarySearch(ts, cs[i][1]);
            if (r < 0) r = -r - 2;
            ans = Math.max(ans, (r < 0 ? 0 : imos[r]) - (l - 1 < 0 ? 0 : imos[l - 1]));
        }

        out.println(base + ans);
        out.flush();
    }
}


2) Accessory Collection

#include <stdio.h>
#include <stdlib.h>

#define REP1(i, n) for (i = 1; i <= (n); i++)

int main() {
    long cc, l, a, n, d;
    scanf("%ld", &cc);
    while (cc--) {
        scanf("%ld %ld %ld %ld", &l, &a, &n, &d);
        if (d > a)
            printf("SAD\n");
        else if (d == 1)
            printf("%ld\n", l * a);
        else {
            long s = -1, i;
            REP1(i, (n - 1) / (d - 1)) {
                long x = n - 1 - (d - 1) * i;
                if (x + a * i < l) continue;
                long c = (l - x) / i;
                s = s > (a * x + (2 * a - c + 1) * c / 2 * i + (a - c) * ((l - x) % i)) ? s : (a * x + (2 * a - c + 1) * c / 2 * i + (a - c) * ((l - x) % i));
            }
            if (s < 0)
                printf("SAD\n");
            else
                printf("%ld\n", s);
        }
    }
    return 0;
}


