Part 1

class Node:
    def __init__(self, key, parent=None):
        self.key = key
        self.parent = parent
        self.left = None
        self.right = None

        if parent is not None:
            if key < parent.key:
                assert parent.left is None, 'parent already has left child'
                parent.left = self
            else:
                assert key > parent.key, 'duplicate key'
                assert parent.right is None, 'parent already has right child'
                parent.right = self

    def get_leftmost(self):
        if self.left:
            return self.left.get_leftmost()
        return self

    def search(self, k):
        if self.key == k:
            return True, self
        if k < self.key and self.left:
            return self.left.search(k)
        if k > self.key and self.right:
            return self.right.search(k)
        return False, self  # return closest parent where node would be inserted

    def insert(self, k):
        found, node = self.search(k)
        if found:
            return None
        if k < node.key:
            return Node(k, node)
        return Node(k, node)

    def height(self):
        left_height = self.left.height() if self.left else 0
        right_height = self.right.height() if self.right else 0
        return 1 + max(left_height, right_height)

    def delete(self, k):
        found, node = self.search(k)
        assert found, f"key:{k} not found"

        def replace(parent, old_child, new_child):
            if parent:
                if parent.left == old_child:
                    parent.left = new_child
                else:
                    parent.right = new_child
            if new_child:
                new_child.parent = parent

        # Case 1: No children
        if node.left is None and node.right is None:
            if node.parent:
                replace(node.parent, node, None)
            else:
                # Root deletion with no children: tricky, not handled in the problem setup
                pass

        # Case 2: One child
        elif node.left is None or node.right is None:
            child = node.left if node.left else node.right
            if node.parent:
                replace(node.parent, node, child)
            else:
                # Replace root node's values
                node.key = child.key
                node.left = child.left
                node.right = child.right
                if node.left:
                    node.left.parent = node
                if node.right:
                    node.right.parent = node

        # Case 3: Two children
        else:
            successor = node.right.get_leftmost()
            node.key = successor.key
            # Now delete the successor node
            if successor.parent.left == successor:
                replace(successor.parent, successor, successor.right)
            else:
                # Successor is the right child of node to be deleted
                replace(successor.parent, successor, successor.right)



Part 2

import random

class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

class BST:
    def __init__(self):
        self.root = None

    def insert(self, key):
        if not self.root:
            self.root = Node(key)
        else:
            self._insert(self.root, key)

    def _insert(self, node, key):
        if key < node.key:
            if not node.left:
                node.left = Node(key)
            else:
                self._insert(node.left, key)
        else:
            if not node.right:
                node.right = Node(key)
            else:
                self._insert(node.right, key)

    def height(self):
        return self._height(self.root)

    def _height(self, node):
        if not node:
            return 0
        return 1 + max(self._height(node.left), self._height(node.right))

def build_random_bst(n):
    keys = list(range(n))
    random.shuffle(keys)
    tree = BST()
    for key in keys:
        tree.insert(key)
    return tree.height()

def run_multiple_trials(n, t):
    depths = [build_random_bst(n) for _ in range(t)]
    return (sum(depths) / len(depths), depths)

